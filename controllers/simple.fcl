FUNCTION_BLOCK InvertedPendulum

	VAR_INPUT
		pa : REAL; (* description='pendulum angle', min=0, max=360, unit='degrees' *)
		pv : REAL; (* description='pendulum angular velocity', min=-200, max=200, unit='degrees per second' *)
	END_VAR

	VAR_OUTPUT
		force : REAL; (* description='force on cart', min=-100, max=100, unit='newton' *)
	END_VAR


	FUZZIFY pa
		TERM up_more_right := (0, 0) (30, 1) (60, 0);
		TERM up_right := (30, 0) (60, 1) (90, 0);
		TERM up := (60, 0) (90, 1) (120, 0);
		TERM up_left := (90, 0) (120, 1) (150, 0);
		TERM up_more_left := (120, 0) (150, 1) (180, 0);
		TERM down_more_left := (180, 0) (210, 1) (240, 0);
		TERM down_left := (210, 0) (240, 1) (270, 0);
		TERM down := (240, 0) (270, 1) (300, 0);
		TERM down_right := (270, 0) (300, 1) (330, 0);
		TERM down_more_right := (300, 0) (330, 1) (360, 0);
	END_FUZZIFY

	FUZZIFY pv
		TERM cw_fast := (-200, 1) (-100, 0);
		TERM cw_slow := (-200, 0) (-100, 1) (0, 0);
		TERM stop := (-100, 0) (0, 1) (100, 0);
		TERM ccw_slow := (0, 0) (100, 1) (200, 0);
		TERM ccw_fast := (100, 0) (200, 1);
	END_FUZZIFY

	DEFUZZIFY force
		TERM left_fast := (-100, 0) (-80, 1) (-60, 0);
		TERM left_slow := (-80, 0) (-60, 1) (0, 0);
		TERM stop := (-60, 0) (0, 1) (60, 0);
		TERM right_slow := (0, 0) (60, 1) (80, 0);
		TERM right_fast := (60, 0) (80, 1) (100, 0);

		ACCU : MAX;
		METHOD : COG;
		DEFAULT := 0;
	END_DEFUZZIFY


	RULEBLOCK InvertedPendulum
		AND : MIN;
		OR : MAX;

		RULE 0:
			IF
				(pa IS up AND pv IS stop)
				OR (pa IS up_right AND pv IS ccw_slow)
				OR (pa IS up_left AND pv IS cw_slow)
			THEN force IS stop;

		RULE 1: IF (pa IS up_more_right) AND (pv IS ccw_slow) THEN force IS right_fast;
		RULE 2: IF (pa IS up_more_right) AND (pv IS cw_slow) THEN force IS right_fast;

		RULE 3: IF (pa IS up_more_left) AND (pv IS cw_slow) THEN force IS left_fast;
		RULE 4: IF (pa IS up_more_left) AND (pv IS ccw_slow) THEN force IS left_fast;

		RULE 5: IF (pa IS up_more_right) AND (pv IS ccw_fast) THEN force IS left_slow;
		RULE 6: IF (pa IS up_more_right) AND (pv IS cw_fast) THEN force IS right_fast;

		RULE 7: IF (pa IS up_more_left) AND (pv IS cw_fast) THEN force IS right_slow;
		RULE 8: IF (pa IS up_more_left) AND (pv IS ccw_fast) THEN force IS left_fast;


		RULE 9: IF (pa IS down_more_right) AND (pv IS ccw_slow) THEN force IS right_fast;
		RULE 10: IF (pa IS down_more_right) AND (pv IS cw_slow) THEN force IS stop;

		RULE 11: IF (pa IS down_more_left) AND (pv IS cw_slow) THEN force IS left_fast;
		RULE 12: IF (pa IS down_more_left) AND (pv IS ccw_slow) THEN force IS stop;


		RULE 13: IF (pa IS down_more_right) AND (pv IS ccw_fast) THEN force IS stop;
		RULE 14: IF (pa IS down_more_right) AND (pv IS cw_fast) THEN force IS stop;

		RULE 15: IF (pa IS down_more_left) AND (pv IS cw_fast) THEN force IS stop;
		RULE 16: IF (pa IS down_more_left) AND (pv IS ccw_fast) THEN force IS stop;


		RULE 17: IF (pa IS down_right) AND (pv IS ccw_slow) THEN force IS right_fast;
		RULE 18: IF (pa IS down_right) AND (pv IS cw_slow) THEN force IS right_fast;

		RULE 19: IF (pa IS down_left) AND (pv IS cw_slow) THEN force IS left_fast;
		RULE 20: IF (pa IS down_left) AND (pv IS ccw_slow) THEN force IS left_fast;


		RULE 21: IF (pa IS down_right) AND (pv IS ccw_fast) THEN force IS stop;
		RULE 22: IF (pa IS down_right) AND (pv IS cw_fast) THEN force IS right_slow;

		RULE 23: IF (pa IS down_left) AND (pv IS cw_fast) THEN force IS stop;
		RULE 24: IF (pa IS down_left) AND (pv IS ccw_fast) THEN force IS left_slow;


		RULE 25: IF (pa IS up_right) AND (pv IS ccw_slow) THEN force IS right_slow;
		RULE 26: IF (pa IS up_right) AND (pv IS cw_slow) THEN force IS right_fast;
		RULE 27: IF (pa IS up_right) AND (pv IS stop) THEN force IS right_fast;
		RULE 28: IF (pa IS up_left) AND (pv IS cw_slow) THEN force IS left_slow;
		RULE 29: IF (pa IS up_left) AND (pv IS ccw_slow) THEN force IS left_fast;
		RULE 30: IF (pa IS up_left) AND (pv IS stop) THEN force IS left_fast;


		RULE 31: IF (pa IS up_right) AND (pv IS ccw_fast) THEN force IS left_fast;
		RULE 32: IF (pa IS up_right) AND (pv IS cw_fast) THEN force IS right_fast;
		RULE 33: IF (pa IS up_left) AND (pv IS cw_fast) THEN force IS right_fast;
		RULE 34: IF (pa IS up_left) AND (pv IS ccw_fast) THEN force IS left_fast;


		RULE 35: IF (pa IS down) AND (pv IS stop) THEN force IS right_fast;
		RULE 36: IF (pa IS down) AND (pv IS cw_fast) THEN force IS stop;
		RULE 37: IF (pa IS down) AND (pv IS ccw_fast) THEN force IS stop;

		RULE 38: IF (pa IS up) AND (pv IS ccw_slow) THEN force IS left_slow;
		RULE 39: IF (pa IS up) AND (pv IS ccw_fast) THEN force IS left_fast;
		RULE 40: IF (pa IS up) AND (pv IS cw_slow) THEN force IS right_slow;
		RULE 41: IF (pa IS up) AND (pv IS cw_fast) THEN force IS right_fast;
		RULE 42: IF (pa IS up) AND (pv IS stop) THEN force IS stop;

	END_RULEBLOCK

END_FUNCTION_BLOCK
